#Prefix to postfix:

static boolean isOperator(char x)
{
switch(x)
{
case '+':
case '-':
case '/':
case '*':
return true;
}
return false;
}
static String preToPost(String exp)
{
Stack<String> s=new Stack<String>();
int len=exp.length();
for(int i=len-1;i>=0;i--)
{
if(isOperator(exp.charAt(i))
{
String op1=s.peek();
s.pop();
String op2=s.peek();
s.pop();
String temp=op1+op2+exp.charAt(i);
s.push(temp);
}
else
{
s.push(exp.charAt(i)+"");
}
}
return s.peek();
}


#Postfix to prefix:
static String pretoPost(String exp)
{
Stack<String> st=new Stack<String>();
int length=exp.length();
for(int i=0;i<length;i++)
{
if(isOperator(exp.charAt(i))
{
Strig op1=s.peek();
s.pop();
String op2=s.peek();
s.pop();
String temp=exp.charAt(i)+op1+op2;
s.push(temp);
}
else
{
s.push(exp.charAt(i)+"");
}
}




#Postfix toInfix:
static boolean isOperand(char x)
{
return (x>='A' && x<='Z')||(x>='a' && x<='z');
}
static String getInfix(String exp)
{
Stack<String> s=new Stack<String>();
for(int i=0;i<exp.length;i++)
{
if(isOperand(exp.charAt(i))
{
s.push(exp.charAt(i)+"");
}
else
{
String op1=s.peek();
s.pop();
String op2=s.peek();
s.pop();
s.push("("+op2+exp.charAt(i)+op1+")");
}
}


#


















































































