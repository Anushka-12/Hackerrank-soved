import java.util.Stack;
class Test
{
static int prec(char ch)
{
switch(ch)
{
case '+':
case '-':
return 1;

case '*':
case '/':
return 2;

case '^':
return 3;
}
return -1;
}


static String infixToPostfix(String exp)
{
String result=new String("");
Stack<Character> stack=new Stack<>();
for(int i=0;i<exp.length();i++)
{
char c=exp.charAt(i);
if(Character.isLetterOrDigit(c))
result=result+c;

else if(c=='(')
stack.push(c);

else if(c==')')
{
while(!stack.isEmpty() && stack.peek()!='(')
result=result+stack.pop();

if(!stack.Empty() && stack.peek()!='(')
return "Invalid Expression";
else
stack.pop();
}

else
{
while(!stack.isEmpty() && Prec(c) <=Prec(stack.peek()))
{
if(stack.peek()=='(')
return "Invalid expression";
result=result+stack.pop();
}
stack.push(c);
}
}

while(!stack.isEmpty())
{
if(stack.peep()=='(')
return "Invalid Expression";
result=result+stack.pop();
}

return result;
}


































